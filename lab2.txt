1.
BEGIN
    FOR t IN (SELECT table_name FROM user_tables) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
END;

2.
-- Kopiowanie REGIONS
CREATE TABLE REGIONS AS SELECT * FROM HR.REGIONS;
ALTER TABLE REGIONS ADD CONSTRAINT REGIONS_PK PRIMARY KEY (REGION_ID);

-- Kopiowanie COUNTRIES
CREATE TABLE COUNTRIES AS SELECT * FROM HR.COUNTRIES;
ALTER TABLE COUNTRIES ADD CONSTRAINT COUNTRIES_PK PRIMARY KEY (COUNTRY_ID);
ALTER TABLE COUNTRIES ADD CONSTRAINT COUNTRIES_FK FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID);

-- Kopiowanie LOCATIONS
CREATE TABLE LOCATIONS AS SELECT * FROM HR.LOCATIONS;
ALTER TABLE LOCATIONS ADD CONSTRAINT LOCATIONS_PK PRIMARY KEY (LOCATION_ID);
ALTER TABLE LOCATIONS ADD CONSTRAINT LOCATIONS_FK FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);

-- Kopiowanie DEPARTMENTS
CREATE TABLE DEPARTMENTS AS SELECT * FROM HR.DEPARTMENTS;
ALTER TABLE DEPARTMENTS ADD CONSTRAINT DEPARTMENTS_PK PRIMARY KEY (DEPARTMENT_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT DEPARTMENTS_FK FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID);

-- Kopiowanie JOBS
CREATE TABLE JOBS AS SELECT * FROM HR.JOBS;
ALTER TABLE JOBS ADD CONSTRAINT JOBS_PK PRIMARY KEY (JOB_ID);

-- Kopiowanie EMPLOYEES
CREATE TABLE EMPLOYEES AS SELECT * FROM HR.EMPLOYEES;
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_PK PRIMARY KEY (EMPLOYEE_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_JOB_FK FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_DEPT_FK FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_MGR_FK FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);

-- Kopiowanie JOB_HISTORY
CREATE TABLE JOB_HISTORY AS SELECT * FROM HR.JOB_HISTORY;
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JOB_HISTORY_PK PRIMARY KEY (EMPLOYEE_ID, START_DATE);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JOB_HISTORY_EMP_FK FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JOB_HISTORY_JOB_FK FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JOB_HISTORY_DEPT_FK FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);

-- Kopiowanie JOB_GRADES
CREATE TABLE JOB_GRADES AS SELECT * FROM HR.JOB_GRADES;
ALTER TABLE JOB_GRADES ADD CONSTRAINT JOB_GRADES_PK PRIMARY KEY (GRADE_LEVEL);

3.
SELECT first_name || ' ' || last_name AS fullname, salary, phone_number
FROM employees
WHERE SUBSTR(last_name, 3, 1) = 'e' 
AND first_name LIKE '%' || '&user_input' || '%'
ORDER BY 1 DESC, 2 ASC;

4.
SELECT first_name, last_name, ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS months_worked,
       CASE 
           WHEN MONTHS_BETWEEN(SYSDATE, hire_date) < 150 THEN salary * 0.1
           WHEN MONTHS_BETWEEN(SYSDATE, hire_date) BETWEEN 150 AND 200 THEN salary * 0.2
           ELSE salary * 0.3
       END AS wysokosc_dodatku
FROM employees
ORDER BY months_worked;

5.
SELECT department_id, SUM(salary) AS suma_zarobkow, ROUND(AVG(salary)) AS srednia_zarobkow
FROM employees
GROUP BY department_id
HAVING MIN(salary) > 5000;

6.
SELECT e.last_name, e.department_id, d.department_name, e.job_id
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'Toronto';

7.
SELECT e1.first_name, e1.last_name, e2.first_name, e2.last_name
FROM employees e1
JOIN employees e2 ON e1.department_id = e2.department_id
WHERE e1.first_name = 'Jennifer' AND e1.employee_id <> e2.employee_id;

8.
SELECT department_name
FROM departments
WHERE department_id NOT IN (SELECT DISTINCT department_id FROM employees);

9.
SELECT e.first_name, e.last_name, e.job_id, d.department_name, e.salary, jg.grade
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN job_grades jg ON e.salary BETWEEN jg.min_salary AND jg.max_salary;

10.
SELECT first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees)
ORDER BY salary DESC;

11.
SELECT e.employee_id, e.first_name, e.last_name
FROM employees e
WHERE e.department_id IN (
    SELECT DISTINCT department_id 
    FROM employees 
    WHERE last_name LIKE '%u%'
);
